# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class RegionBackendServices < GcpResourceBase
  name 'google_compute_region_backend_services'
  desc 'RegionBackendService plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:health_checks, field: :health_checks)
  filter_table_config.add(:backends, field: :backends)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:fingerprints, field: :fingerprint)
  filter_table_config.add(:protocols, field: :protocol)
  filter_table_config.add(:session_affinities, field: :session_affinity)
  filter_table_config.add(:regions, field: :region)
  filter_table_config.add(:timeout_secs, field: :timeout_sec)
  filter_table_config.add(:connection_drainings, field: :connection_draining)
  filter_table_config.add(:load_balancing_schemes, field: :load_balancing_scheme)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('items')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params)
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'name' => ->(obj) { return :name, obj['name'] },
      'healthChecks' => ->(obj) { return :health_checks, obj['healthChecks'] },
      'backends' => ->(obj) { return :backends, GoogleInSpec::Compute::Property::RegionBackendServiceBackendsArray.parse(obj['backends'], to_s) },
      'description' => ->(obj) { return :description, obj['description'] },
      'fingerprint' => ->(obj) { return :fingerprint, obj['fingerprint'] },
      'protocol' => ->(obj) { return :protocol, obj['protocol'] },
      'sessionAffinity' => ->(obj) { return :session_affinity, obj['sessionAffinity'] },
      'region' => ->(obj) { return :region, obj['region'] },
      'timeoutSec' => ->(obj) { return :timeout_sec, obj['timeoutSec'] },
      'connectionDraining' => ->(obj) { return :connection_draining, GoogleInSpec::Compute::Property::RegionBackendServiceConnectionDraining.new(obj['connectionDraining'], to_s) },
      'loadBalancingScheme' => ->(obj) { return :load_balancing_scheme, obj['loadBalancingScheme'] },
    }
  end

  # Handles parsing RFC3339 time string
  def parse_time_string(time_string)
    time_string ? Time.parse(time_string) : nil
  end

  private

  def product_url
    'https://www.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/regions/{{region}}/backendServices'
  end
end
